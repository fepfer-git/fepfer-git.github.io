$(document).ready(function () {
	make_sure_obj_contains(saved, ["order"], true);

	var MIN_WIDGET_WIDTH = 240,
		MIN_WIDGET_HEIGHT = 160,
		unsaved = clone(saved),
		order = unsaved.order,
		feeds = unsaved.feeds,
		isRSS = unsaved.RSS && unsaved.RSS.source,
		layout = unsaved.layout,
		settings = unsaved.settings,
		animation = unsaved.animation,
		attributionTimer = 0,
		$attribution = $(".attribution"),
		sessionsArr = [],
		animationStatus,
		timeoutTimer = 0,
		curAnimationId = 0,
		set_nav_scroller = function() {},
		expirationTimer = 0,

		lastTs,

		$frameWrapper = $(document.body).children("#frame_wrapper"),
		$tooltip = $(document.body).children("#tooltip"),
		// $behindTooltip = $(document.body).children("#behind_tooltip"),
		$frameSlider = $frameWrapper.children("#horizontal_slider"),
		$frameMain = $frameSlider.children("#frame_main"),
		$frameContent = $frameMain.children(".frame_content"),
		$navs = $frameMain.children(".nav_panel").addClass("horizontal_centerer vertical_centerer"),
		$briefsFull = $frameSlider.children("#briefs_full").children(".frame_content"),
		// $briefsFullContent = $briefsFull.children(".frame_sliding"),
		showingBriefsFull = false,
		curItemId,
		lastCurItemId = -1,
		$circles = [],
		maxW = $frameContent.outerWidth(),
		maxH = $frameContent.outerHeight(),
		maxDimension,

		fontTimerCountdown = 20,
		heightRestartCountdown = 3,

		boxPartitionInterval = 0,
		briefsTimestampWidthInterval = 0,
		bannerPartitionInterval = 0,

		isTouch = is_touch_device(),
		tooltipTimer = false,
		dragFirstOffset,
		dragLastOffset,
		dragVertical = {
			coor: "clientY",
			posFrom: "top",
			oDim: "outerHeight"
		},
		dragHorizontal = {
			coor: "clientX",
			posFrom: "left",
			oDim: "outerWidth"
		},
		dragHorizontalRight = {
			coor: "clientX",
			posFrom: "right",
			oDim: "outerWidth",
			inv: true
		},
		dragMode,
		dragQuantize,
		sessionsOffsets,
		isDragged = false,
		isDraggedTimer = 0,
		isAnimating = false,
		dragAndNotClick = false,
		briefsFullOffsetY = false,

		hoverPause = false,
		changeItemPause = false,
		tapTitlePause = false,
		space = 20,
		bigSpace = 20,
		// speed = 30; // pixels/sec

		lastBodyWidth = -1,
		lastBodyHeight = -1,
		resizeDelayer = new FuncDelayer(on_resize, 500),
		lastNonBannerHeight = -1,
		restartDelayer = new FuncDelayer(restart_all, 1000),
		refreshRSSDelayer = new FuncDelayer(refresh_RSS, 1000),

		publishAfterSaved = false,
		saveHandler = pubver
			? { activate: function() {} }
			: new SaveHandler(saveURL, "settings", function(s) {
				if ((s == "Saved") && publishAfterSaved) {
					do_save(saveURL, "publish", [], function(response) {
						// show_message("Your updated feed is now published!", 4000);
					}, function(errMessage) {
						// show_message("Sorry, something went wrong while trying to publish your feed", 6000);
					});
		
					publishAfterSaved = false;
				}

				function show_message(msg, duration) {
					$("#system_message").text(msg).parent().fadeIn();
					setTimeout(function() {
						$("#system_message").parent().fadeOut();
					}, duration);
				}
			}, 1500),

		ATTRIBUTION = "News Ticker is powered by ShareiiiT.",

		undefined;

	find_urls(saveURL, urls);

	restart_all();
	set_shrt_style(shrtStyle, styleParams, unsaved.design);

	function restart_all() {
		console.log("restart_all");
		stop_animation();
		reset_tab_areas();
		hoverPause = false;
		changeItemPause = false;
		tapTitlePause = false;

		// var checks = 40,
			// frameContentWidth = $frameContent.width();
		// if (frameContentWidth < 10)
			// restartDelayer.activate();

		// var checkFrameWidthTimer = setInterval(function() {
			// if ($frameContent.width() != frameContentWidth)
				// restartDelayer.activate();
			// else if (--checks > 0)
				// return;
			// clearTimeout(checkFrameWidthTimer);
		// }, 250);

		if (boxPartitionInterval) {
			clearInterval(boxPartitionInterval);
			boxPartitionInterval = 0;
		}
		if (briefsTimestampWidthInterval) {
			clearInterval(briefsTimestampWidthInterval);
			briefsTimestampWidthInterval = 0;
		}
		if (bannerPartitionInterval) {
			clearInterval(bannerPartitionInterval);
			bannerPartitionInterval = 0;
		}

		set_date_format(settings.dateFormat);
		set_time_format(settings.timeFormat);

		var className = layout.type + " animation_" + animation[layout.type + "Animation"];
		$(document.body).toggleClass("rtl", !!settings.RTL);
		$frameContent.closest("#frame_wrapper")[0].className = className;

		lastTs = 0;

		$frameContent.empty();
		var $session = add_div("session").appendTo($frameContent),
			$divider;

		$divider = add_div("divider horizontal_centerer");
		// if (settings.dividerType == "singleLine")
			// add_div("singleLine").appendTo($divider);

		//
		// Circles / Arrows
		//

		var $nav, $navDiv;
		className = "";
		console.log("restarting " + layout.type);
		if (layout.type == "box") {
			if (layout.navigationBy == "circles") {
				className = layout.circlesLoc;
				$nav = $navs.filter("." + className + "_nav").empty();
				$navDiv = add_div().appendTo(add_div("scroller vertical_centerer").appendTo($nav));
				$circles = [];
			} else if (layout.navigationBy == "arrows") {
				className = "bottom";
				$navs.filter(".bottom_nav").empty().append(
					add_SVG2("arrow_" + layout.arrowType, "nav_icon arrow upward", "auto")
						.register_tab_area("nav", "button"),
					add_SVG2("arrow_" + layout.arrowType, "nav_icon arrow downward", "auto")
						.register_tab_area("nav", "button")
				);
			}
		} else if (layout.type == "banner") {
			if (layout.showBannerNavigation) {
				className = "left_right";
				$navs.filter(".left_nav").empty().append(
					add_SVG2("arrow_" + layout.arrowType, "nav_icon arrow backward", "auto")
						.register_tab_area("nav", "button")
				);
				$navs.filter(".right_nav").empty().append(
					add_SVG2("arrow_" + layout.arrowType, "nav_icon arrow", "auto")
						.register_tab_area("nav", "button")
				);
			}
		}
		$frameMain[0].className = "nav_" + className;
			

		//
		// Output items content
		//

		var nextExpiry,
			now = new Date().getTime(),
			notFirst = false;
		curItemId = isRSS ? 0 : order[0];
		for (var i = 0; i < (isRSS ? RSSfeeds.length : order.length); i++) {
			var id = isRSS ? i : order[i],
				item = get_item(id);
			if (!item) {
				console.error("Item is null", id);
				continue;
			}
			if (premium && item.hidden)
				continue;

			if (premium && item.expire && item.expTime) {
				if (item.expTime < now)
					continue;
				else if (!nextExpiry || (item.expTime < nextExpiry))
					nextExpiry = item.expTime;
			}

			if (notFirst)
				$divider.clone().appendTo($session);
			notFirst = true;

			var isImage = (layout.type == "box") && (item.img || item.exImg) && (layout.showImage != "none"),
				useLink = (layout.type != "briefs") && item.url,
				$imgWrapper,
				$img,
				// Using .attr() and not .data() so that the clone will work smoothly
				$item = add_div("item").appendTo($session).attr("data-id", id),
				story = (isRSS && (layout.type == "banner")) ? item.title : item.s;

			if (isRSS && layout.cancelRSSLinks)
				useLink = false;
			if (isRSS && layout.hideRSSImages)
				isImage = false;

			if (layout.type == "briefs")
				$item.addClass("linked");

			else if (layout.navigationBy == "circles")
				$circles.push(
					add_div("nav_icon circle" + (i ? "" : " selected"))
					.data("id", id)
					.html("<svg><circle r='7' cx='10' cy='10'/></svg>")
					.appendTo($navDiv)
					.register_tab_area("nav", "button")
				);

			if ((layout.type == "box") || (layout.type == "briefs"))
				$item.css("width", $frameContent.width());

			if (isImage) {
				var cls = layout.showImage.match(/float/) ? "" : " horizontal_centerer";
				if (item.img) {
					// Wix image - object with relative URI
					var s = max_image_size(item.img.width, item.img.height,
						layout.imageWidth * $frameContent.width() / 100, 2 * $frameContent.height());

					$imgWrapper = add_div("image" + cls).css({
						height: s.height,
						maxHeight: item.img.height
					});
					$img = $("<img>").appendTo($imgWrapper).attr("src",
						(s.width >= item.img.width) ? Wix.Utils.Media.getImageUrl(item.img.relativeUri) :
						Wix.Utils.Media.getResizedImageUrl(item.img.relativeUri, s.width, s.height));
				}
				else {
					// External image - just a URL
					$imgWrapper = add_div("image" + cls);
					if (item.exImg.w && item.exImg.h) {
						var s = max_image_size(item.exImg.w, item.exImg.h,
							layout.imageWidth * $frameContent.width() / 100, 2 * $frameContent.height());
						$imgWrapper.css({
							height: s.height,
							maxHeight: item.exImg.h
						});
					}
					$img = $("<img>").css("maxWidth", layout.imageWidth * $frameContent.width() / 100)
						.appendTo($imgWrapper).attr("src", strip_protocol(item.exImg.url));
				}
				$img.attr("draggable", false);
			}
			
			//
			// Fill item parts
			//

			// Time stamp
			if ((((layout.type == "briefs") && layout.showBriefsTime)
			|| ((layout.type != "briefs") && layout.showTime)) && item.ts && !item.hideTimestamp)
				add_div("timestamp").text(item.ts ? display_timestamp(item.ts) : " ").appendTo($item);

			// Title (doesn't exist in Banner)
			if ((layout.type != "banner") && layout.showTitle) {
				var $title = add_div("title").appendTo($item);
				if ((layout.type == "box") && (animation.boxAnimation != "ver"))
					$title.addClass("one_line");
				make_link_if($title, "linked",
					useLink && (!layout.activateLink /*== "title"*/), item.title ? item.title : " ", "link");
			}

			// Image
			if (isImage && ($.inArray(layout.showImage, ["above", "lfloat", "rfloat"]) != -1))
				$item.addClass(layout.showImage).append($imgWrapper);

			if (layout.type == "briefs")
				// Briefs arrow icon to enter story
				add_SVG2("arrow_" + layout.briefsArrowType, "nav_icon arrow", "auto")
					.register_tab_area("briefs", "button").appendTo($item);
			else
				// Story (not in briefs)
				make_link_if(add_div("story").appendTo($item), "linked",
					useLink && !layout.activateLink, safe_html_with_newlines(story), "link", false, true);

			// Relocate image if 'below'
			if (isImage && (layout.showImage == "below"))
				$imgWrapper.appendTo($item);

			// Link (text/button)
			if (useLink)
				add_link_or_button($item, "i_0_" + id + "_" + 0);
			else if ((layout.type == "banner") && (layout.activateLink == "button"))
				add_div("button_line").append(
					make_button("hidden", ".")
				).appendTo($item);
		} // for (var i = 0; i < nof feeds; i++)

		if (expirationTimer)
			clearTimeout(expirationTimer);
		if (nextExpiry)
			expirationTimer = setTimeout(restart_all, Math.min(24 * 3600 * 1000, nextExpiry - now) + 1000);
		else
			expirationTimer = 0;

		// Check if attribution to ShareiiiT is required
		if (!premium && !unsaved.isDemo) {
			var addAttributionItem = true;
			if (layout.type == "briefs")
				addAttributionItem = false;
			else if ((isRSS ? RSSfeeds : order).length <= 1) {
				if ((layout.type == "box") && (animation.boxAnimation != "ver"))
					addAttributionItem = false;
				if ((layout.type == "banner") && (animation.bannerAnimation != "hor"))
					addAttributionItem = false;
			}

			if (addAttributionItem) {
				// Add attribution to ShareiiiT
				$divider.clone().appendTo($session);

				var $item = add_div("item").appendTo($session).attr("data-id", -1);

				if (layout.type == "briefs")
					$item.addClass("linked");

				if ((layout.type == "box") || (layout.type == "briefs"))
					$item.css("width", $frameContent.width());

				//
				// Fill item parts
				//

				// if ((((layout.type == "briefs") && layout.showBriefsTime)
				// || ((layout.type != "briefs") && layout.showTime)) && item.ts && !item.hideTimestamp)
					// add_div("timestamp").text(item.ts ? display_timestamp(item.ts) : " ").appendTo($item);

				if ((layout.type != "banner") && layout.showTitle)
					add_div("title").text("News Ticker").appendTo($item);

				if (layout.type == "briefs")
					add_SVG2("arrow_" + layout.briefsArrowType, "nav_icon arrow", "auto")
						.register_tab_area("briefs", "button").appendTo($item);
				else
					add_div("story").text(ATTRIBUTION).appendTo($item);
			} else {
				setTimeout(show_attribution_banner_for_a_while, 3000);
				attributionTimer = setInterval(show_attribution_banner_for_a_while, 60000);
				function show_attribution_banner_for_a_while() {
					$attribution/*.toggleClass("top")*/.fadeIn("slow");
					setTimeout(function() {
						$attribution.fadeOut();
					}, 5000);
				}
			}
		} // if (!premium && !unsaved.isDemo)

		// If more than 2 circles, prepare for possible scrolling of navigator

		if ($navDiv) {
			$nav.css("margin", 0);
			var $navIcons = $navDiv.children();
			if ($navIcons.length > 2) {
				var isVertical = $nav.hasClass("vertical"),
					coordinate = isVertical ? "top" : "left",
					prevLeftCoor = isVertical ? "height" : "width",
					iconSize = Math.abs($navIcons.eq(1).position()[coordinate]
						- $navIcons.eq(0).position()[coordinate]),
					maxSize = isVertical ? $nav.outerHeight() : $nav.outerWidth(),
					nofIcons = Math.floor(maxSize / iconSize),
					margin = (maxSize - nofIcons * iconSize) / 2;

				$nav.css("margin", isVertical ? (margin + "px 0") : ("0 " + margin + "px")).append(
					add_div("nav_prev")[prevLeftCoor](iconSize),
					add_div("nav_next")[prevLeftCoor](iconSize)
				).children(".scroller").data({
					step: iconSize,
					visible: nofIcons,
					num: $navIcons.length
				}).scrollLeft((settings.RTL && !isVertical) ? (iconSize * $navIcons.length) : 0);
			}
		}

		//
		// Format divider
		//

		var $sessionDivider = add_div("divider session_divider horizontal_centerer vertical_centerer")
			.appendTo($session);
		// if (settings.dividerType == "singleLine") {
			// add_div("singleLine").appendTo($sessionDivider);
			// if ((layout.type == "banner") && (animation.bannerAnimation == "hor"))
				// $session.find(".singleLine").height($session.height());
		// }

		$frameWrapper.scrollLeft(((layout.type == "briefs") && settings.RTL) ? $frameWrapper.width() : 0);

		//
		// Start animation
		//

		console.log("requesting frame " + typeof window.requestAnimationFrame);
		requestAnimationFrame(function() {
			console.log("layout=" + layout.type);
			$frameWrapper.css("height", "");
			switch (layout.type) {
			case "box":
				console.log("box=" + animation.boxAnimation);
				switch (animation.boxAnimation) {
				case "ver":
					// console.log($frameWrapper.height(), $session.height());
					// if ($session.height() < 1) {
						// restartDelayer.activate();
						// return;
					// }
					clone_sessions($session, Math.ceil($frameWrapper.height() / $session.height()));
					box_scroll_up(curAnimationId);
					for (var i = 0; i < sessionsArr.length; i++)
						sessionsArr[i].find("[tabenabled]").each(function() {
							var $this = $(this),
								$item = $this.closest(".item");
							$this.unregister_tab_area().register_tab_area("items", "link");
						});
					activate_tab_areas(["nav", "items"]);

					// Sometimes it takes time for the font to download, and then height changes
					var curSessionHeight = $session.height();
					if (fontTimerCountdown)
						boxPartitionInterval = setInterval(function() {
							var exceedingItemHeight = ($session.height() > curSessionHeight);
							fontTimerCountdown--;
							if (exceedingItemHeight || !fontTimerCountdown) {
								fontTimerCountdown = 0;
								clearInterval(boxPartitionInterval);
								boxPartitionInterval = 0;
							}
							if (exceedingItemHeight)
								restartDelayer.activate();
						}, 500);

					break; // "ver"
				default:
					// "hor", "fade"
					box_partition($divider);
					var newLeft = ($frameContent.outerWidth() - $frameContent.width()) / 2;
					$session.css({
						left: newLeft,
						top: ($frameContent.outerHeight() - $frameContent.height()) / 2
					}).data("left", newLeft);
					clone_sessions($session, 1);
					newLeft = $session.outerWidth()
						+ ($frameContent.outerWidth() - $frameContent.width()) / 2
					sessionsArr[1].css("left", newLeft).data("left", newLeft);
					animationStatus = {
						session: 0,
						numSessions: 2,
						part: 0,
						numParts: $session.find(".item").length
					}

					sessionsArr[1].find("[tabenabled]").each(function() {
						var $this = $(this),
							$item = $this.closest(".item");
						$this.register_tab_area("i_1_" + $item.data("id") + "_" + $item.data("part"),
							"link");
					});
					activate_tab_areas(["nav", "i_0_" + $frameContent.find(".item").data("id") + "_0"]);
					if ($session.find(".item").length > 1)
						box_switch_items();
				} // switch (animation.boxAnimation)
				break;

			case "briefs":
				var maxTimeWidth = 0,
					SVGWidth = $session.find(".item .SVG_wrapper").eq(0).outerWidth(),
					$title = $session.find(".title");
				console.log("svg=" + SVGWidth);
				$session.find(".timestamp").each(function() {
					if ($(this).width() > maxTimeWidth) {
						maxTimeWidth = $(this).width();
					}
				}).css("width", maxTimeWidth);
				console.log("timewidth=" + maxTimeWidth + ", "
					+ $frameContent.width() +"-"+ SVGWidth +"-"+ maxTimeWidth +"-"+ ($title.outerWidth() - $title.width()));
				$title.css("width",
					$frameContent.width() - SVGWidth - maxTimeWidth - ($title.outerWidth() - $title.width())).addClass("one_line");

				console.log("window=" + $(window).width() + ", "
					+ MIN_WIDGET_WIDTH +"+"+ maxTimeWidth +", "+ $(window).height() + ": " + Wix.Utils.getViewMode());
				if ($(window).width() < MIN_WIDGET_WIDTH + maxTimeWidth) {
					console.log(typeof Wix.resizeComponent);
					Wix.resizeComponent({
						width: MIN_WIDGET_WIDTH + maxTimeWidth,
						height: $(window).height()
					}, function() {console.log("success"); }, function() {console.log("error"); });
					return;
				}

				// Sometimes it takes time for the font to download, and then width changes
				if (fontTimerCountdown)
					briefsTimestampWidthInterval = setInterval(function() {
						var restartRequired = false;
						$session.find(".timestamp").each(function() {
							var $ts = $(this);
							if ($ts.width() < $ts[0].scrollWidth) {
								restartRequired = true;
								return false;
							}
						});

						fontTimerCountdown--;
						if (restartRequired || !fontTimerCountdown) {
							fontTimerCountdown = 0;
							clearInterval(briefsTimestampWidthInterval);
							briefsTimestampWidthInterval = 0;
						}
						if (restartRequired)
							restartDelayer.activate();
					}, 500);

				activate_tab_areas(["briefs"]);

				console.log("briefs=" + animation.briefsAnimation);
				switch (animation.briefsAnimation) {
				case "ver":
					if ($frameContent.height() < $session.height()) {
						clone_sessions($session, Math.ceil($frameWrapper.height() / $session.height()));
						briefs_scroll_up(curAnimationId);
					}

					break;

				default:
					// "fade"
					briefs_partition();
					if (sessionsArr.length > 1) {
						animationStatus = {
							session: 0,
							numSessions: sessionsArr.length
						}
						briefs_switch_items();
					}
					
				} // switch (animation.briefsAnimation)
				break;

			case "banner":
				console.log("case banner");
				// Calculate the height of the highest item
				var insideHeight = Math.max.apply(Math, $frameContent.find(".item").map(function() { return $(this).height(); }).get()),
					newHeight = insideHeight + $frameWrapper.height() - $frameContent.height();
				console.log("newHeight=" + $frameContent.find(".item:eq(0)").height() + "+" + $frameWrapper.height() + "-" + $frameContent.height() + "=" + newHeight);
				if (newHeight > 10) {
					$frameWrapper.height(newHeight);
					lastBodyHeight = newHeight + 12;
					if (($frameContent.height() < insideHeight - 2) && heightRestartCountdown) {
						heightRestartCountdown--;
						restartDelayer.activate();
					}
					Wix.setHeight(lastBodyHeight);
				}

				console.log("banner=" + animation.bannerAnimation);
				switch (animation.bannerAnimation) {
				case "hor":
					clone_sessions($session, Math.ceil($frameWrapper.width() / $session.outerWidth()));
					// Let's set it now, to prevent the "jump" when it starts
					$frameContent.children().css("top",
						($frameContent.outerHeight() - $frameContent.height()) / 2);
					banner_scroll_left(curAnimationId);

					for (var i = 0; i < sessionsArr.length; i++)
						sessionsArr[i].find("[tabenabled]").each(function() {
							var $this = $(this),
								$item = $this.closest(".item");
							$this.unregister_tab_area().register_tab_area("items", "link");
						});
					activate_tab_areas(["nav", "items"]);

					// Sometimes it takes time for the font to download, and then width changes
					var curSessionWidth = $session.width();
					if (fontTimerCountdown)
						bannerPartitionInterval = setInterval(function() {
							var exceedingItemWidth = ($session.width() > curSessionWidth);
							fontTimerCountdown--;
							if (exceedingItemWidth || !fontTimerCountdown) {
								fontTimerCountdown = 0;
								clearInterval(bannerPartitionInterval);
								bannerPartitionInterval = 0;
							}
							if (exceedingItemWidth)
								restartDelayer.activate();
						}, 500);

					break; // "hor"
				default:
					// "ver", "fade"
					var offsetHeight = ($frameContent.outerHeight() - $frameContent.height()) / 2;
					banner_partition($divider);
					$session.css({
						left: 10, //($frameContent.outerWidth() - $frameContent.width()) / 2,
						top: offsetHeight,
						width: "calc(100% - 20px)"
					}).data("top", offsetHeight);
					clone_sessions($session, 1);
					var newTop = offsetHeight + $session.outerHeight();
					sessionsArr[1].css("top", newTop).data("top", newTop);
					animationStatus = {
						session: 0,
						numSessions: 2,
						part: 0,
						numParts: $session.find(".item").length
					}

					sessionsArr[1].find("[tabenabled]").each(function() {
						var $this = $(this),
							$item = $this.closest(".item");
						$this.register_tab_area("i_1_" + $item.data("id") + "_" + $item.data("part"),
							"link");
					});
					activate_tab_areas(["nav", "i_0_" + $frameContent.find(".item").data("id") + "_0"]);
					banner_switch_items();
				break;
				} // switch (animation.boxAnimation)
			} // switch (layout.type)
		}); // requestAnimationFrame
	} // restart_all()

	//
	// Handle animation of circles, if required
	//

	(function() {
		var selector = ".nav_prev, .nav_next",
			scrolling = false,
			direction,
			scrollerBusy = false,
			animating = false,
			timer = 0;

		$navs.on("mouseenter", selector, function(e) {
			var $this = $(this);
			scrolling = true;
			direction = $this.is(".nav_next") ? 1 : -1;
			scroll_animate($(e.delegateTarget).children(".scroller"));
		})
		.on("mouseleave", selector, function() {
			scrolling = false;
		})
		.on("click wheel", selector, function() {
			// Do nothing if on nav-prev/next div and prevent propagation.
			// Mousewheel should only work on rest of div
			return false;
		})
		.on("wheel", function(e) {
			scrolling = true;
			direction = e.originalEvent.deltaY;
			scroll_animate($(e.delegateTarget).children(".scroller"));
			scrolling = false;
			return false;
		})
		.data("update_scroll", function($this) {
			var curScroll = $this[0].scrollTop,
				maxScroll = $this[0].scrollHeight,
				height = $this.height();
			$this.children(".nav_prev").toggle(curScroll > 0);
			$this.children(".nav_next").toggle(curScroll + height < maxScroll);
		})

		set_nav_scroller = function($this, newIndex) {
			if (scrollerBusy || scrolling)
				return;

			scroll_animate($this, newIndex);
		}

		function scroll_animate($this, newIndex) {
			if ($this.data("index") === undefined)
				$this.data("index", 0);
			var $parent = $this.parent(),
				isVertical = $parent.hasClass("vertical"),
				itemSize = $this.data("step"),
				nofVisible = $this.data("visible"),
				nofItems = $this.data("num"),
				curIndex = $this.data("index"),
				animation = {};

			if (newIndex !== undefined) {
				if (newIndex < curIndex + 2)
					curIndex = Math.max(newIndex - Math.floor((nofVisible - 1) / 2), 0);
				else if (newIndex >= curIndex + nofVisible - 2)
					curIndex = Math.min(newIndex - Math.ceil((nofVisible - 1) / 2), nofItems - nofVisible);
				else
					return;
			} else {
				if (!scrolling)
					return;
				scrollerBusy = true;
				var dir = (settings.RTL && !isVertical) ? -direction : direction;

				curIndex = Math.min(Math.max(curIndex + dir, 0), nofItems - nofVisible);
				if (timer)
					clearTimeout(timer);
				timer = setTimeout(function() {
					timer = 0;
					scrollerBusy = false;
				}, 3000);
			}

			if (animating)
				return;
			animating = true;

			$this.data("index", curIndex);

			if (settings.RTL && !isVertical)
				curIndex = nofItems - nofVisible - curIndex;

			animation[isVertical ? "scrollTop" : "scrollLeft"] = curIndex * itemSize;
			$this.animate(animation, 300, "linear", function() {
				animating = false;
				scroll_animate($this);
			})

			$parent.children(".nav_prev").toggle(curIndex > 0);
			$parent.children(".nav_next").toggle(curIndex < nofItems - nofVisible);
		} // scroll_animate()
	})(); // Navigator animation module

	function clone_sessions($session, nofCopies) {
		sessionsArr = [$session];
		for (var j = 0; j < nofCopies; j++)
			sessionsArr.push($session.clone().appendTo($frameContent));
	}

	function add_link_or_button($item, areaId) {
		var l = layout.linkLabel ? layout.linkLabel : "Read more";
		if (layout.activateLink == "link")
			make_link_if(add_div().appendTo($item), "linked", true, l, "link", areaId);

		if (layout.activateLink == "button")
			add_div("button_line").append(
				make_button("linked", l).register_tab_area(areaId, "link")
			).appendTo($item);
	}


	//
	// Handle partition of box layout to fit screen (if horizontal or no animation)
	//

	function box_partition($divider) {
		var $session = $frameContent.children(".session"),
			maxHeight = $frameContent.height(),
			exceedingItemHeight = 0;

		$session.children(".item").each(function() {
			var $item = $(this).attr("data-part", 0),
				itemWidth = $item.width(),
				$story = $item.children(".story"),
				id = $item.data("id"),
				item = get_item(id),
				part = 0,
				prefix = "",
				words = html2txt(strip_src_protocol(item ? item.s.trim() : ATTRIBUTION)).split(/\s+/);

			while ($item.outerHeight() > maxHeight) {
				var nofWordsShortEnough = 0,
					nofWordsTooLong = words.length,
					nofWordsBeingChecked = -1;

				while (nofWordsShortEnough + 1 < nofWordsTooLong) {
					nofWordsBeingChecked = Math.floor((nofWordsShortEnough + nofWordsTooLong) / 2);
					$story.text(prefix + words.slice(0, nofWordsBeingChecked).join(" ") + "...");
					if ($item.outerHeight() <= maxHeight)
						// position = midPos;
						nofWordsShortEnough = nofWordsBeingChecked;
					else
						nofWordsTooLong = nofWordsBeingChecked;

					if (nofWordsTooLong == 1) {
						// Make window taller to contain at least 1 line (story now cotains 1 word)
						exceedingItemHeight = Math.max(exceedingItemHeight, $item.outerHeight());

						// Skip to next. After all items will be processed,
						// the resize event will restart drawing and animation.
						return;
					}
				}

				$story.text(prefix + words.splice(0, nofWordsShortEnough).join(" ") + "...");
				prefix = "... ";

				var $oldItem = $item;
				$item = add_div("item").attr({ "data-id": id, "data-part": ++part }).insertAfter($oldItem)
					.css("width", itemWidth);
				var $story = add_div("story").text(prefix + words.join(" ")).appendTo($item);
				// $divider.clone().insertBefore($item);

				if (item.url)
					add_link_or_button($item, "i_0_" + id + "_" + part);

				$divider.clone().insertBefore($item);
			}
		});

		if (exceedingItemHeight)
			Wix.setHeight($(window).height() + 10 + exceedingItemHeight - maxHeight);
		$session.find(".divider").height($session.height());

		// Sometimes it takes time for the font to download, and then height changes
		if (fontTimerCountdown)
			boxPartitionInterval = setInterval(function() {
				exceedingItemHeight = false;
				$frameContent.children(".session:eq(0)").children(".item").each(function() {
					if ($(this).outerHeight() > maxHeight) {
						exceedingItemHeight = true;
						return false;
					}
				});
				fontTimerCountdown--;
				if (exceedingItemHeight || !fontTimerCountdown) {
					fontTimerCountdown = 0;
					clearInterval(boxPartitionInterval);
					boxPartitionInterval = 0;
				}
				if (exceedingItemHeight)
					restartDelayer.activate();
			}, 500);
	} // box_partition()

	//
	// Handle switching items or item partition of box layout (if horizontal or no animation)
	//

	function box_switch_items() {
		// $frameContent.parent().scrollLeft("50");
		timeoutTimer = setTimeout(function() {
			var newLeft, // = sessionsArr[0].outerWidth()
					// + ($frameContent.outerWidth() - $frameContent.width()) / 2,
				$session0 = sessionsArr[0],
				left0 = $session0.data("left"),
				$session1 = sessionsArr[1],
				left1 = $session1.data("left");
			if (left0 < left1) {
				if (left1 < 0) {
					newLeft = left1 + $session1.outerWidth();
					$session0.css("left", newLeft).data("left", newLeft);
				}
			} else {
				if (left0 < 0) {
					newLeft = left0 + $session0.outerWidth();
					$session1.css("left", newLeft).data("left", newLeft);
				}
			}

			var timeout = (11 - animation.itemTransitionSpeed) * 100,
				$item = sessionsArr[animationStatus.session].find(".item:eq(" + animationStatus.part + ")"),
				// $item.next() is the divider
				offset = $item.outerWidth() + $item.next().outerWidth();

			if (!hoverPause && !changeItemPause && !animation.disableAnimation && !tapTitlePause && !isDragged && !isDraggedTimer) {
				$tooltip.fadeOut();
				$nextItem = sessionsArr[animationStatus.session].find(".item:eq("
					+ ((animationStatus.part + 1 ) % animationStatus.numParts) + ")"),
				curItemId = $nextItem.data("id");
				activate_tab_areas([]);
				select_circle();

				for (var i = 0; i < sessionsArr.length; i++) {
					var $session = sessionsArr[i],
						curOffset = $session.data("left");
					newLeft = curOffset - offset;
					isAnimating = true;
					if (animation.boxAnimation == "hor")
						$session.data("left", newLeft).animate({ left: newLeft }, timeout);
					else
						// fade
						$session.data("left", curOffset - offset).fadeOut(timeout / 2)
							.queue(function() {
								var $this = $(this);
								$this.css("left", $this.data("left")).fadeIn(timeout / 2).dequeue();
							});
				}

				if (++animationStatus.part >= animationStatus.numParts) {
					animationStatus.part -= animationStatus.numParts;
					animationStatus.session = 1 - animationStatus.session;
				}
				setTimeout(function() {
					isAnimating = false;
					activate_tab_areas(["nav",
						"i_" + animationStatus.session + "_" + curItemId + "_" + $nextItem.data("part")]);
				}, timeout + 100);
			}

			timeoutTimer = setTimeout(box_switch_items, timeout);
		}, animation.delayOnItem * 1000);
	} // box_switch_items()

	//
	// Handle animation of box layout (if vertical animation)
	//

	function box_scroll_up(animationId) {
		requestAnimationFrame(function() {
			requestAnimationFrame(function(ts) {
				if (animationId != curAnimationId)
					return;

				var $sessions = $frameContent.children(),
					contentMiddle = $frameContent.height() / 2;

				if (!lastTs) {
					var h = 0, //$frameContent.height(),
						offsetLeft = ($frameContent.outerWidth() - $frameContent.width()) / 2;

					$sessions.each(function(i) {
						var $this = $(this);
						$this.css({ left: offsetLeft, top: h }).data("top", h);
						h += $this.outerHeight() + space;
					});
				} else if (!hoverPause && !changeItemPause && !animation.disableAnimation) {
					var diff = (lastTs == "paused") ? 0
							: Math.min((ts - lastTs) * animation.speed / 1000, 5),
						lastBottom = false;

					$sessions.each(function() {
						var $this = $(this),
							newTop = $this.data("top") - diff,
							h = $this.outerHeight(),
							curId = false;
						if ((newTop + h < 0) && (lastBottom !== false))
							newTop = lastBottom + space;

						lastBottom = newTop + h;
						$this.css("top", Math.floor(newTop)).data("top", newTop);
						if ((newTop < 10) && (lastBottom > 10)) {
							$this.children(".item").each(function() {
								var $this = $(this);
								if ($this.offset().top < 10)
									curId = $this.data("id");
							});
							if (curId !== false) {
								curItemId = curId;
								select_circle();
							}
						}
					});

					var $first = $sessions.eq(0),
						h = $first.outerHeight();
					if ($first.data("top") + h < 0) {
						// max() with maxH + space so that we will not see one twice
						newTop = Math.max(lastBottom + bigSpace, maxH + space);
						$first.css("top", Math.floor(newTop)).data("top", newTop);
					}
				}
				lastTs = ts;
				box_scroll_up(animationId);
			});
		});
	} // box_scroll_up()

	//
	// Handle partition of briefs layout to fit screen (if horizontal or no animation)
	//

	function briefs_partition() {
		var $session = $frameContent.children(".session"),
			$items = $session.children(".item"),
			itemsHeight = $items.map(function() { return $(this).outerHeight(); });

		sessionsArr = [$session];
		if ($session.height() > $frameContent.height()) {
			var totalHeight = 0,
				lastMoved = 0;
			for (var i = 0; i < itemsHeight.length; i++) {
				totalHeight += itemsHeight[i];
				if (totalHeight > $frameContent.height()) {
					if (i == lastMoved) {
						console.error("Not tall enough!");
						return;
					}
					sessionsArr.push(
						add_div("session").hide().appendTo($frameContent).append($items.slice(i))
					);
					totalHeight = itemsHeight[i];
					lastMoved = i;
				}
			}
		}
	} // briefs_partition()

	//
	// Handle switching items or item partition of briefs layout (if horizontal or no animation)
	//

	function briefs_switch_items() {
		timeoutTimer = setTimeout(function() {
			var timeout = (11 - animation.itemTransitionSpeed) * 100,
				$session = sessionsArr[animationStatus.session];

			$session.fadeOut(timeout / 2, function() {
				animationStatus.session++;
				if (animationStatus.session >= animationStatus.numSessions)
					animationStatus.session = 0;
				sessionsArr[animationStatus.session].fadeIn(timeout / 2);
			});

			timeoutTimer = setTimeout(briefs_switch_items, timeout);
		}, animation.delayOnItem * 1000);
	} // briefs_switch_items()

	//
	// Handle animation of briefs layout (if vertical animation)
	//

	function briefs_scroll_up(animationId) {
		requestAnimationFrame(function() {
			requestAnimationFrame(function(ts) {
				if (animationId != curAnimationId)
					return;

				var $sessions = $frameContent.children();

				if (!lastTs) {
					var h = 0; //$frameContent.height();
					$sessions.each(function(i) {
						var $this = $(this);
						$this.css({ /*left: 20,*/ top: h }).data("top", h);
						h += $this.outerHeight() + space;
					});
				} else if (!hoverPause && !changeItemPause && !animation.disableAnimation) {
					var diff = (lastTs == "paused") ? 0
							: Math.min((ts - lastTs) * animation.speed / 1000, 5),
						lastBottom = false;

					$sessions.each(function() {
						var $this = $(this),
							newTop = $this.data("top") - diff,
							h = $this.outerHeight();
						if ((newTop + h < 0) && (lastBottom !== false))
							newTop = lastBottom + space;

						lastBottom = newTop + h;
						$this.css("top", Math.floor(newTop)).data("top", newTop);
					});

					var $first = $sessions.eq(0),
						h = $first.outerHeight();
					if ($first.data("top") + h < 0) {
						// max() with maxH + space so that we will not see one twice
						newTop = Math.max(lastBottom + bigSpace, maxH + space);
						$first.css("top", Math.floor(newTop)).data("top", newTop);
					}
				}
				lastTs = ts;
				briefs_scroll_up(animationId);
			});
		});
	} // briefs_scroll_up()

	function banner_partition($divider) {
		var $session = $frameContent.children(".session");
		$session.children(".item").each(function() {
			var $item = $(this).attr("data-part", 0),
				// itemHeight = $item.height(),
				$story = $item.children(".story"),
				id = $item.data("id"),
				item = get_item(id),
				part = 0,
				prefix = "",
				words = html2txt(strip_src_protocol(item.s.trim())).split(/\s+/),
				maxWidth = $frameContent.width();

			while ($item.outerWidth() > maxWidth) {
				var // maxWidth = $frameContent.width() - ($item.width() - $story.outerWidth()),
					nofWordsShortEnough = 0,
					nofWordsTooLong = words.length,
					nofWordsBeingChecked = -1;
				// if (maxWidth < 0) {
					// console.error("Not even one word!");
				// }
				$story.empty();
				// if (0 && ($item.outerWidth() > maxWidth)) {
					// setTimeout(function() {
						// Wix.resizeComponent({
							// width: $item.outerWidth() + 65,
							// height: $(window).height()
						// });
					// }, 50);
					// return false;
				// }
				while (nofWordsShortEnough + 1 < nofWordsTooLong) {
					// var m = Math.floor((nofWordsShortEnough + nofWordsTooLong) / 2);
					// if (m == nofWordsBeingChecked)
						// break;
					nofWordsBeingChecked = Math.floor((nofWordsShortEnough + nofWordsTooLong) / 2);
					$story.text(prefix + words.slice(0, nofWordsBeingChecked).join(" ") + "...");
					if ($item.outerWidth() <= maxWidth)
						// position = midPos;
						nofWordsShortEnough = nofWordsBeingChecked;
					else
						nofWordsTooLong = nofWordsBeingChecked;
				}

				if (nofWordsShortEnough == 0) {
					// Not even one word - try to slice the first word into chars
					console.log("***** not even one word ************");
					var chars = words[0].split(""),
						nofCharsShortEnough = 0,
						nofCharsTooLong = chars.length,
						nofCharsBeingChecked = -1;
					$story.empty();
					while (nofCharsShortEnough + 1 < nofCharsTooLong) {
						nofCharsBeingChecked = Math.floor((nofCharsShortEnough + nofCharsTooLong) / 2);
						$story.text(prefix + chars.slice(0, nofCharsBeingChecked).join("") + "...");
						if ($item.outerWidth() <= maxWidth)
							// position = midPos;
							nofCharsShortEnough = nofCharsBeingChecked;
						else
							nofCharsTooLong = nofCharsBeingChecked;
					}
					if (nofCharsShortEnough == 0) {
						// Not even one char - quit this item
						console.log("***** not even one char ************");
						break;
					}

					$story.text(prefix + chars.splice(0, nofCharsShortEnough).join("") + "...");
					words[0] = chars.join("");
				} else
					$story.text(prefix + words.splice(0, nofWordsShortEnough).join(" ") + "...");

				if (item.url && !layout.activateLink) {
					var txt = $story.text();
					$story.empty().append($("<a>").addClass("linked").text(txt));
				}

				prefix = "... ";

				var $oldItem = $item;
				$item = add_div("item").attr({ "data-id": id, "data-part": ++part }).insertAfter($oldItem)
					// .css("height", itemHeight);
				var $story = make_link_if(add_div("story"), "linked", item.url && !layout.activateLink,
					prefix + words.join(" "), "link", false, true).appendTo($item);
				$divider.clone().insertBefore($item);

				if (item.url)
					add_link_or_button($item, "i_0_" + id + "_" + part);
				else if ((layout.type == "banner") && (layout.activateLink == "button"))
					add_div("button_line").append(
						make_button("hidden", ".")
					).appendTo($item);
			}
		});
		$session.find(".divider").width($session.width());
	} // banner_partition()

	function banner_switch_items() {
		timeoutTimer = setTimeout(function() {
			if (animationStatus.part >= animationStatus.numParts) {
				animationStatus.part = 0;
				var offsetHeight = ($frameContent.outerHeight() - $frameContent.height()) / 2;
				sessionsArr[animationStatus.session].css("top", offsetHeight + sessionsArr[0].outerHeight());
				animationStatus.session = 1 - animationStatus.session;
			}

			var timeout = (11 - animation.itemTransitionSpeed) * 100,
				$item = sessionsArr[animationStatus.session].find(".item:eq(" + animationStatus.part + ")"),
				offset = $item.outerHeight() + $item.next().outerHeight();

			if (!hoverPause && !changeItemPause && !animation.disableAnimation) {
				var $nextItem = sessionsArr[animationStatus.session].find(".item:eq("
					+ ((animationStatus.part + 1 ) % animationStatus.numParts) + ")");
				curItemId = $nextItem.data("id");

				activate_tab_areas([]);
				for (var i = 0; i < sessionsArr.length; i++) {
					var $session = sessionsArr[i],
						curOffset = parseInt($session.css("top"));

					if (animation.bannerAnimation == "ver")
						$session.animate({ top: curOffset - offset }, timeout);
					else
						// fade
						// $session.data("newOffset", curOffset - offset).fadeOut(timeout / 2, function() {
							// $session.css("left", $session.data("newOffset")).fadeIn(timeout / 2);
						// });
						$session.data("newOffset", curOffset - offset).fadeOut(timeout / 2)
							.queue(function() {
								var $this = $(this);
								$this.css("top", $this.data("newOffset")).fadeIn(timeout / 2).dequeue();
							});
				}

				animationStatus.part++;

				setTimeout(function() {
					isAnimating = false;
					activate_tab_areas(["nav",
						"i_" + animationStatus.session + "_" + curItemId + "_" + $nextItem.data("part")]);
				}, timeout + 100);
			}

			timeoutTimer = setTimeout(banner_switch_items, timeout);
		}, animation.delayOnItem * 1000);
	} // banner_switch_items()

	function banner_scroll_left(animationId) {
		requestAnimationFrame(function() {
			requestAnimationFrame(function(ts) {
				if (animationId != curAnimationId)
					return;

				var $sessions = $frameContent.children(),
					fromDir = settings.RTL ? "right" : "left";

				if (!lastTs) {
					var w = 0,
						offsetTop = ($frameContent.outerHeight() - $frameContent.height()) / 2;
					$sessions.each(function(i) {
						var $this = $(this);
						$this.css("top", offsetTop).css(fromDir, w).data(fromDir, w);
						w += $this.width();
					});
					// Wix.setHeight($frameContent.outerHeight() + 12);
				} else if (!hoverPause && !changeItemPause && !animation.disableAnimation) {
					var diff = (lastTs == "paused") ? 0
							: Math.min((ts - lastTs) * animation.speed / 1000, 5),
						lastEnd = false;
					$sessions.each(function() {
						var $this = $(this),
							newLeft = $this.data(fromDir) - diff,
							w = $this.outerWidth(),
							curId = false;
						if ((newLeft + w < 0) && (lastEnd !== false))
							newLeft = lastEnd;

						lastEnd = newLeft + w;
						$this.css(fromDir, Math.floor(newLeft)).data(fromDir, newLeft);

						// problem when RTL
						if ((newLeft < 10) && (lastEnd > 10)) {
							$this.children(".item").each(function() {
								var $this = $(this);
								if ($this.offset().left < 10)
									curId = $this.data("id");
							});
							if (curId)
								curItemId = curId;
						}
					});

					var $first = $sessions.eq(0),
						w = $first.outerWidth();
					if ($first.data(fromDir) + w < 0) {
						newLeft = Math.max(lastEnd + bigSpace, maxW);
						$first.css(fromDir, Math.floor(newLeft)).data(fromDir, newLeft);
					}
				}
				lastTs = ts;
				banner_scroll_left(animationId);
			});
		});
	} // banner_scroll_left()

	//
	// Pause on mouseover
	//

	$frameSlider.mousemove(function() {
		if (animation.hoverPauses && !isTouch)
			hoverPause = true;
	}).mouseleave(function() {
		hoverPause = false;
	});

	$(document.body).on("click keypress", ".nav_panel .circle", function(ev) {
		if ((ev.type == "keypress") && (ev.key != "Enter"))
			return;

		var $this = $(this);
		if ($this.hasClass("selected"))
			return;

		goto_item($this.data("id"));
	})

	.on("click keypress", ".nav_panel .arrow", function(ev) {
		if ((ev.type == "keypress") && (ev.key != "Enter") && (ev.key != " "))
			return;

		var $this = $(this),
			$briefsFullParent = $this.closest("#briefs_full"),
			isBackwardButton = $this.is(".upward,.backward"),
			isBackward = ((layout.type == "banner") && settings.RTL) ? !isBackwardButton : isBackwardButton,
			isBriefsFull = !!$briefsFullParent.length,
			curId = isBriefsFull ? $briefsFullParent.children(".frame_content").data("id") : curItemId,
			curIndex = isRSS ? curId : $.inArray(curId, order),
			nofItems = isRSS ? RSSfeeds.length : order.length,
			index = (curIndex + nofItems + (isBackward ? -1 : 1)) % nofItems,
			nextId = isRSS ? index : order[index];

		if (isBriefsFull) {
			draw_briefs_full(nextId);
			activate_tab_areas(["full"]);
			$briefsFull.parent().find(".arrow." + (isBackwardButton ? "backward" : "forward")).focus();
		} else
			goto_item(isRSS ? index : order[index]);

		return false;
	})

	.on("click keypress", ".briefs .item", function(ev) {
		if ((ev.type == "keypress") && (ev.key != "Enter") && (ev.key != " "))
			return;

		if (dragAndNotClick)
			return;

		enter_briefs_full($(this).data("id"));
		$briefsFull.parent().data("caller", $(this).find(".arrow"));
		ev.stopPropagation();
		return false;
	})

	.on("click keypress", ".nav_back .nav_icon", function(ev) {
		if ((ev.type == "keypress") && (ev.key != "Enter") && (ev.key != " "))
			return;

		back_from_briefs_full();

		// var $briefsFull = $frameWrapper.children("#briefs_full"),
			// w = $briefsFull.outerWidth(),
			// fLeft = parseInt($frameContent.css("left")),
			// fRight = parseInt($frameContent.css("right"));
		// $frameContent.animate({
			// left: fLeft + w,
			// right: fRight - w
		// });
		// $briefsFull.animate({ left: w }, function() {
			// $briefsFull.empty();
		// });
		return false;
	})

	.on("click keypress", ".linked", function(ev) {
		if ((ev.type == "keypress") && (ev.key != "Enter"))
			return;

		var $this = $(this),
			$item = $this.closest(".item,.frame_content"),
			id = $item.data("id"),
			item = get_item(id);

		if ($this.is(".briefs .item"))
			return;
		if (!item || !item.url)
			return;

		if (/*$this.is("#briefs_full .frame_content .linked") &&*/ dragAndNotClick)
			return;

		if (typeof item.url == "object") {
			if (item.url.type == "message") {
				set_title_tooltip($this, item.url.msg);
				tapTitlePause = true;
				setTimeout(function() {
					$tooltip.fadeOut();
					tapTitlePause = false;
				}, 5000);
			} else if ((item.url.type == "DocumentLink") && item.url_opens_new_tab) {
				var t = Wix.Media.getDocumentUrl(item.url.docId).replace(/ugd\/ugd/, "ugd");
				window.open(t);
			} else
				Wix.navigateTo(item.url, function() {
					// Failure
					console.error(arguments);
				});
		} else
			window.open(item.url);
		return false;
	});

	//
	// Show a tooltip with whole title when title is truncated
	//

	$frameContent.on("mouseenter", ".title.one_line", function() {
		if (this.offsetWidth >= this.scrollWidth)
			return;
		set_title_tooltip($(this));
		tapTitlePause = true;
	})
	.on("mouseleave", ".title.one_line", function() {
		$tooltip.fadeOut();
		tapTitlePause = false;
	})
	.on("touchstart", ".title.one_line", function() {
		if (this.offsetWidth >= this.scrollWidth)
			return;
		if (tooltipTimer)
			clearTimeout(tooltipTimer);
		tapTitlePause = true;
		var $this = $(this);
		tooltipTimer = setTimeout(function() {
			set_title_tooltip($this);
		}, 1000);
	})
	.on("touchmove touchend", ".title.one_line", function() {
		if (tooltipTimer)
			clearTimeout(tooltipTimer);
		tooltipTimer = 0;
		tapTitlePause = false;
	})
	.click(function() {
		$tooltip.fadeOut();
		tapTitlePause = false;
	})
	.on("contextmenu", function() {
		if (isTouch)
			return false;
	});

	function set_title_tooltip($title, msg) {
		var fromTop = $title.offset().top + $title.outerHeight() + 5;
		
		$tooltip.text(msg ? msg : $title.text()).css({
			top: fromTop
		}).fadeIn();
		var tooltipHeight = $tooltip.outerHeight();
		if (fromTop + tooltipHeight > $(window).height() - 10)
			$tooltip.css("top", $(window).height() - 10 - tooltipHeight);
		// $behindTooltip.css({
			// width: $tooltip.width(),
			// height: $tooltip.height()
		// })
	}

	function enter_briefs_full(id) {
		showingBriefsFull = true;
		draw_briefs_full(id);
		activate_tab_areas([]);
		$frameWrapper.animate({scrollLeft: settings.RTL ? 0 : $frameWrapper.width()}, function() {
			activate_tab_areas(["full"]);
			set_closed_tab_area($briefsFull.parent(), back_from_briefs_full);
			$briefsFull.parent().children(".nav_back").children().focus();
			hoverPause = false;
		});
	}

	function draw_briefs_full(id) {
		curAnimationId++;
		var item = get_item(id),
			$parent = $briefsFull.parent();

		$parent.children(".nav_back").empty().append(
			add_SVG2("arrow_" + layout.arrowType, "arrow backward nav_icon", "auto")
				.register_tab_area("full", "button")
		);

		$briefsFull.data("id", id).stop().scrollLeft(0).css("opacity", "");

		$parent.toggleClass("nav_bottom", (layout.navigationBy == "arrows"))
		.find(".bottom_nav").empty().append(
			add_SVG2("arrow_" + layout.arrowType, "nav_icon arrow backward", "auto")
				.register_tab_area("full", "button"),
			add_SVG2("arrow_" + layout.arrowType, "nav_icon arrow forward", "auto")
				.register_tab_area("full", "button")
		);

		// if ((layout.type == "box") || (layout.type == "briefs"))
			// $item.css("width", $frameContent.width());

		var isImage = (item.img || item.exImg) && (layout.showImage != "none"),
			$imgWrapper,
			$img;

		if (isRSS && layout.hideRSSImages)
			isImage = false;

		// if (layout.navigationBy == "circles")
			// $circles.push(
				// add_div("nav_icon circle" + (i ? "" : " selected")).data("id", id)
				// .html("<svg><circle r='7' cx='10' cy='10'/></svg>")
				// .appendTo($navDiv)
			// );

		// if ((layout.type == "box") || (layout.type == "briefs"))
			// $item.css("width", $frameContent.width());

		if (isImage) {
			var cls = layout.showImage.match(/float/) ? "" : " horizontal_centerer";
			if (item.img) {
				// Wix image - object with relative URI
				var s = max_image_size(item.img.width, item.img.height,
					layout.imageWidth * $briefsFull.width() / 100, 2 * $briefsFull.height());

				$imgWrapper = add_div("image" + cls).css("height", s.height);
				$img = $("<img>").appendTo($imgWrapper).attr("src",
					(s.width >= item.img.width) ? Wix.Utils.Media.getImageUrl(item.img.relativeUri) :
					Wix.Utils.Media.getResizedImageUrl(item.img.relativeUri, s.width, s.height))
			}
			else {
				// External image - just a URL
				$imgWrapper = add_div("image" + cls);
				if (item.exImg.w && item.exImg.h) {
					var s = max_image_size(item.exImg.w, item.exImg.h,
						layout.imageWidth * $briefsFull.width() / 100, 2 * $briefsFull.height());
					$imgWrapper.css("height", s.height);
				}
				$img = $("<img>").css("maxWidth", layout.imageWidth * $briefsFull.width() / 100)
					.appendTo($imgWrapper).attr("src", strip_protocol(item.exImg.url));
			}
			$img.attr("draggable", false);
		}

		//
		// Fill item parts
		//

		$briefsFull.empty();
		var $item = add_div().appendTo($briefsFull),
			itemUrl = (isRSS && layout.cancelRSSLinks) ? false : item.url;

		// Time stamp
		if (layout.showTime && item.ts && !item.hideTimestamp)
			add_div("timestamp").text(item.ts ? display_timestamp(item.ts) : " ").appendTo($item);

		// Title
		if (layout.showTitle && item.title) {
			make_link_if(add_div("title").appendTo($item), "linked",
				itemUrl && (!layout.activateLink /*== "title"*/), item.title ? item.title : " ", "link");
		}

		// Image
		if (isImage && ($.inArray(layout.showImage, ["above", "lfloat", "rfloat"]) != -1))
			$item.addClass(layout.showImage).append($imgWrapper);

		// Story
		make_link_if(add_div("story").appendTo($item), "linked",
			itemUrl && !layout.activateLink, safe_html_with_newlines(item.s), "link", false, true);

		// Relocate image if 'below'
		if (isImage && (layout.showImage == "below"))
			$imgWrapper.appendTo($item);

		// Link (text/button)
		if (itemUrl)
			add_link_or_button($item, "full");

		//
		// Start briefs-full animation
		//

		lastTs = 0;

		requestAnimationFrame(function() {
			$frameWrapper.css("height", "");
			// switch (layout.type) {
			// case "box":
				switch (animation.briefsFullAnimation) {
				case "ver":
					$briefsFull.data("top", 0).scrollTop(0);
					// clone_sessions($session, Math.ceil($frameWrapper.height() / $session.height()));
					briefs_full_scroll_up(curAnimationId);

					break; // "ver"
				default:
					// "hor", "fade"
					briefs_full_partition();
					animationStatus = {
						session: 0,
						numSessions: 1,
						part: 0,
						numParts: $briefsFull.children(".briefs_full_part").length
					}
					if (animationStatus.numParts > 1)
						briefs_full_switch_items();
					break;
				} // switch (animation.boxAnimation)
				// break;

			// case "briefs":
				// var maxTimeWidth = 0,
					// SVGWidth = $session.find(".item .SVG_wrapper").eq(0).outerWidth(),
					// $title = $session.find(".title");
				// $session.find(".timestamp").each(function() {
					// if ($(this).width() > maxTimeWidth) {
						// maxTimeWidth = $(this).width();
					// }
				// }).css("width", maxTimeWidth);
				// $title.css("width",
					// $frameContent.width() - SVGWidth - maxTimeWidth - ($title.outerWidth() - $title.width())).addClass("one_line");

				// switch (animation.briefsAnimation) {
				// case "ver":
					// if ($frameContent.height() < $session.height()) {
						// clone_sessions($session, Math.ceil($frameWrapper.height() / $session.height()));
						// briefs_scroll_up(curAnimationId);
					// }

					// break;

				// default:
					// // "fade"
					// briefs_partition();
					// if (sessionsArr.length > 1) {
						// animationStatus = {
							// session: 0,
							// numSessions: sessionsArr.length
						// }
						// briefs_switch_items();
					// }
					
				// } // switch (animation.briefsAnimation)
				// break;

			// case "banner":
				// $frameWrapper.height($frameContent.find(".item:eq(0)").height()
					// + $frameWrapper.height() - $frameContent.height());
				// switch (animation.bannerAnimation) {
				// case "hor":
					// clone_sessions($session, Math.ceil($frameWrapper.width() / $session.outerWidth()));
					// banner_scroll_left(curAnimationId);

					// break; // "hor"
				// default:
					// // "ver", "fade"
					// var offsetHeight = ($frameContent.outerHeight() - $frameContent.height()) / 2;
					// banner_partition($divider);
					// $session.css({
						// left: ($frameContent.outerWidth() - $frameContent.width()) / 2,
						// top: offsetHeight
					// });
					// clone_sessions($session, 1);
					// sessionsArr[1].css("top", offsetHeight + $session.outerHeight());
					// animationStatus = {
						// session: 0,
						// numSessions: 2,
						// part: 0,
						// numParts: $session.find(".item").length
					// }

					// banner_switch_items();
				// break;
				// } // switch (animation.boxAnimation)
			// } // switch (layout.type)
		}); // requestAnimationFrame
	} // draw_briefs_full()

	function back_from_briefs_full() {
		if (!showingBriefsFull)
			return;
		showingBriefsFull = false;

		stop_animation();
		activate_tab_areas([]);
		$frameWrapper.animate({scrollLeft: settings.RTL ? $frameWrapper.width() : 0}, function() {
			activate_tab_areas(["briefs"]);

			// Restart briefs animation
			switch (animation.briefsAnimation) {
			case "ver":
				if ($frameContent.height() < $frameContent.children(".session:eq(0)").height())
					briefs_scroll_up(curAnimationId);

				break;

			default:
				// "fade"
				if (sessionsArr.length > 1)
					briefs_switch_items();
				
			} // switch (animation.briefsAnimation)

			// Focus on caller
			var $elem = $briefsFull.parent().data("caller");
			if ($elem)
				$elem.focus();
		});
	}

	//
	// Handle animation of briefs-full (if vertical animation)
	//

	function briefs_full_scroll_up(animationId) {
		requestAnimationFrame(function() {
			requestAnimationFrame(function(ts) {
				if (animationId != curAnimationId)
					return;

				if (hoverPause || changeItemPause || isDragged) {
					briefs_full_scroll_up(animationId);
					return;
				}

				if (!lastTs) {
					var $this = $(this);
					$briefsFull.data("top", 0).animate({ scrollTop: 0}, function() {
						setTimeout(function() {
							briefs_full_scroll_up(animationId);
						}, 1000 * animation.briefsFullDelayEdges);
					});
				} else {
					var diff = (lastTs == "paused") ? 0
							: Math.min((ts - lastTs) * animation.briefsFullSpeed / 1000, 5),
						newTop = $briefsFull.data("top") + diff;
					$briefsFull.scrollTop(Math.floor(newTop)).data("top", newTop);

					if (newTop >= $briefsFull.scrollTop() + 1) {
						setTimeout(function() {
							lastTs = false;
							briefs_full_scroll_up(animationId);
						}, 1000 * animation.briefsFullDelayEdges);
						return;
					}

					briefs_full_scroll_up(animationId);
				}
				lastTs = ts;
			});
		});
	} // briefs_full_scroll_up()

	function briefs_full_partition() {
		var $part = add_div("briefs_full_part");
		$briefsFull.children().appendTo($part);
		$part.appendTo($briefsFull);

		// break_into_parts($item, $item.data("id"), $frameContent.height(), "item", $divider);
		break_into_parts($part, $briefsFull.data("id"), $briefsFull.height(), "briefs_full_part");
	} // briefs_full_partition()

	function briefs_full_switch_items() {
		timeoutTimer = setTimeout(function() {
			var timeout = (11 - animation.briefsFullItemTransitionSpeed) * 100;

			if (!hoverPause && !changeItemPause) {
				animationStatus.part++;
				if (animationStatus.part >= animationStatus.numParts)
					animationStatus.part = 0;
				var offset = animationStatus.part * $briefsFull.outerWidth();

				if (animation.briefsFullAnimation == "hor")
					$briefsFull.animate({scrollLeft: offset}, timeout)
				else
					$briefsFull.animate({ opacity: 0 }, timeout / 2, function() {
						$briefsFull.scrollLeft(offset).animate({ opacity: 1 }, timeout / 2);
					});
					// Fade
					// $session.data("newOffset", curOffset - offset).fadeOut(timeout / 2, function() {
						// $session.css("left", $session.data("newOffset")).fadeIn(timeout / 2);
					// });
					// $session.data("newOffset", curOffset - offset).fadeOut(timeout / 2)
						// .queue(function() {
							// var $this = $(this);
							// $this.css("left", $this.data("newOffset")).fadeIn(timeout / 2).dequeue();
						// });
				// }

			}

			timeoutTimer = setTimeout(briefs_full_switch_items, timeout);
		}, animation.briefsFullDelayOnItem * 1000);
	}

	function break_into_parts($part, id, maxHeight, itemClass, $divider) {
		var $item = $part.children(),
			itemWidth = $item.width(),
			$story = $item.children(".story"),
			item = get_item(id),
			part = 0,
			prefix = "",
			words = html2txt(strip_src_protocol(item.s.trim())).split(/\s+/);

		while ($item.outerHeight() > maxHeight) {
			var nofWordsShortEnough = 0,
				nofWordsTooLong = words.length,
				nofWordsBeingChecked = -1;

			while (nofWordsShortEnough + 1 < nofWordsTooLong) {
				nofWordsBeingChecked = Math.floor((nofWordsShortEnough + nofWordsTooLong) / 2);
				$story.text(prefix + words.slice(0, nofWordsBeingChecked).join(" ") + "...");
				if ($item.outerHeight() <= maxHeight)
					// position = midPos;
					nofWordsShortEnough = nofWordsBeingChecked;
				else
					nofWordsTooLong = nofWordsBeingChecked;

				if (nofWordsTooLong == 1) {
					// Make window taller to contain at least 1 line (story now cotains 1 word)
					Wix.setHeight($(window).height() + 10 + $item.outerHeight() - maxHeight);

					// Stop everything. The resize event will restart drawing and animation.
					return false;
				}
			}

			$story.text(prefix + words.splice(0, nofWordsShortEnough).join(" ") + "...");
			$item.data("part", part++);
			prefix = "... ";

			var $oldPart = $part;
			$part = add_div(itemClass).attr({ "data-id": id, "data-part": part }).insertAfter($oldPart)
				// .css("width", itemWidth);
			$item = add_div("").appendTo($part);
			$story = add_div("story").text(prefix + words.join(" ")).appendTo($item);
			if ($divider)
				$divider.clone().insertBefore($item);
		}
	} // break_into_parts()

	$(window).resize(function() {
		resizeDelayer.activate();
	});

	function on_resize(forced) {
		var wWidth = $(window).width(),
			wHeight = $(window).height(),
			newHeight;
		if (!wWidth || !wHeight)
			return;

		maxW = $frameContent.outerWidth();
		maxH = $frameContent.outerHeight();
		$frameMain.visible();

		// Prevent mobile from redrawing on every next/prev
		if ((wWidth == lastBodyWidth) && (Math.abs(wHeight - lastBodyHeight) < 4) && !forced)
			return;
		lastBodyWidth = wWidth;
		lastBodyHeight = wHeight;
		if ((layout.type != "banner") && (wHeight < MIN_WIDGET_HEIGHT))
			newHeight = MIN_WIDGET_HEIGHT;

		if (wWidth < MIN_WIDGET_WIDTH) {
			Wix.resizeComponent({ width: MIN_WIDGET_WIDTH, height: newHeight ? newHeight : wHeight });
			return;
		} else if (newHeight)
			Wix.resizeComponent({ width: wWidth, height: newHeight });

		heightRestartCountdown = 3;
		restart_all();
	}

	function display_timestamp(ts) {
		var d = new Date(ts),
			s = "";

		if (settings.timestampDisplay.match(/d/)) {
			s += Date_to_str(d);
		}
		if (settings.timestampDisplay.match(/t/)) {
			s += (s ? " " : "") + hr_mn_to_str(d.getHours(), d.getMinutes());
		}
		return s;
		// return d.getDate() + "/" + (d.getMonth() + 1) + "/" + d.getFullYear()
			// + " " + d.getHours() + ":" + make2digits(d.getMinutes());
	}

	function get_item(id) {
		return (id == -1) ? { t: "News Ticker", s: ATTRIBUTION } :
			(isRSS ? RSSfeeds[id] : get_element_by_id(id, feeds));
	}

	function goto_item(id) {
		curItemId = id;

		changeItemPause = true;
		select_circle();

		switch (layout.type) {
		case "box":
			switch (animation.boxAnimation) {
			case "ver":
				var $item = sessionsArr[0].children(".item[data-id=" + id + "]"),
					h = /*Math.max($frameContent.height() - $item.height(), 0)*/ - ($item.position().top),
					offsetLeft = ($frameContent.outerWidth() - $frameContent.width()) / 2;

				$frameContent.children().each(function(i) {
					var $this = $(this);
					$this.css({ left: offsetLeft, top: h }).data("top", h);
					h += $this.outerHeight() + space;
				});

				// setTimeout(function() {
					// box_scroll_up(curAnimationId);
				// }, 10);

				break;
			default:
				var frameSpace = ($frameContent.outerWidth() - $frameContent.width()) / 2,
					$items = sessionsArr[0].children(".item"),
					$curItem = $items.filter("[data-id=" + id + "]").eq(0),
					offset = $curItem.position().left,
					newLeft = frameSpace - offset;

				sessionsArr[0].css("left", newLeft).data("left", newLeft);
				newLeft += sessionsArr[0].outerWidth()
				sessionsArr[1].css("left", newLeft).data("left", newLeft);
				animationStatus.session = 0;
				animationStatus.part = $items.index($curItem); //$.inArray(id, order);

				activate_tab_areas(["nav", "i_0_" + id + "_0"]);
				// console.log(animationStatus.part, $items.index($curItem), $items,
					// sessionsArr[0].children(".item[data-id=" + id + "]").index(),
					// sessionsArr[0].children().filter(".item[data-id=" + id + "]").index(),
					// $curItem.index());

				// setTimeout(function() {
					// box_switch_items();
				// }, 10);
			}

			break;
		case "banner":
			switch (animation.bannerAnimation) {
			case "hor":
				var $item = sessionsArr[0].children(".item[data-id=" + id + "]"),
					w = /*Math.max($frameContent.height() - $item.height(), 0)*/ - ($item.position().left),
					offsetTop = ($frameContent.outerHeight() - $frameContent.height()) / 2,
					fromDir = settings.RTL ? "right" : "left";

				$frameContent.children().each(function(i) {
					var $this = $(this);
					$this.css("top", offsetTop).css(fromDir, w).data(fromDir, w);
					w += $this.outerWidth() + space;
				});

				// setTimeout(function() {
					// banner_scroll_left(curAnimationId);
				// }, 10);
			
				break;

			default:
				var frameSpace = ($frameContent.outerHeight() - $frameContent.height()) / 2,
					$items = sessionsArr[0].children(".item"),
					$curItem = $items.filter("[data-id=" + id + "]").eq(0),
					offset = $curItem.position().top;

				sessionsArr[0].css("top", frameSpace - offset);
				sessionsArr[1].css("top", frameSpace - offset + sessionsArr[0].outerHeight());
				animationStatus.session = 0;
				animationStatus.part = $items.index($curItem); //$.inArray(id, order);

				activate_tab_areas(["nav", "i_0_" + id + "_0"]);
				// console.log(animationStatus.part, $items.index($curItem), $items,
					// sessionsArr[0].children(".item[data-id=" + id + "]").index(),
					// sessionsArr[0].children().filter(".item[data-id=" + id + "]").index(),
					// $curItem.index());

				// setTimeout(function() {
					// banner_switch_items();
				// }, 10);
			}
			break;
		} // switch (layout.type)

		setTimeout(function() {
			changeItemPause = false;
		}, 1000);
	} // goto_item()

	function select_circle() {
		if (curItemId == lastCurItemId)
			return;
		if (curItemId < 0)
			return;
		lastCurItemId = curItemId;
		if (layout.navigationBy == "circles")
			for (var i = 0; i < $circles.length; i++) {
				var thisIsIt = $circles[i].data("id") == curItemId;
				$circles[i].toggleClass("selected", thisIsIt); //.attr("tabindex", thisIsIt ? "" : "0");
				if (thisIsIt)
					set_nav_scroller($circles[i].closest(".scroller"), i);
			}
	}

	function stop_animation() {
		if (timeoutTimer) {
			clearTimeout(timeoutTimer);
			timeoutTimer = 0;
		}
		if (attributionTimer) {
			clearTimeout(attributionTimer);
			attributionTimer = 0;
		}

		lastTs = "paused";
		curAnimationId++;
	}

	on_settings_updated(function(arr, postback) {
		if (arr.feed) {
			fontTimerCountdown = 20;
			heightRestartCountdown = 3;

			var args = arr.feed,
				dontSave = (args._fromCompId && (args._fromCompId != compId));

			if (args.areYouThere)
				postback({ ver: scriptVer });

			if (args.layout) {
				if ((args.layout.type == "banner") && (unsaved.layout.type != "banner"))
					lastNonBannerHeight = $(window).height();
				else if ((args.layout.type != "banner") && (unsaved.layout.type == "banner"))
					if (lastNonBannerHeight > $(window).height())
						Wix.setHeight(lastNonBannerHeight);

				unsaved.layout = args.layout;
				layout = unsaved.layout;
				saveHandler.activate("layout", unsaved.layout, saved, "layout");

				if (showingBriefsFull && (isRSS ? RSSfeeds.length : order.length))
					draw_briefs_full(isRSS ? 0 : order[0]);
				else
					restartDelayer.activate();
			}

			if (args.feed) {
				if (unsaved.isDemo) {
					delete unsaved.isDemo;
					delete saved.isDemo;
					unsaved.feeds = [];
					feeds = unsaved.feeds;
					saved.feeds = [];
				}

				var id = args.feed.id,
					index = get_index_by_id(id, feeds),
					savedIndex = get_index_by_id(id, saved.feeds);

				if (index == -1)
					feeds.push(args.feed);
				else
					feeds[index] = args.feed;

				if (savedIndex == -1) {
					saved.feeds.push({ id: id });
					savedIndex = saved.feeds.length - 1;
				}

				if (!dontSave)
					saveHandler.activate("feed_" + id, args.feed, saved.feeds, savedIndex);
				restartDelayer.activate();

				if (!args.order)
					console.error("No order attached");
			}

			if (args.allFeeds) {
				if (unsaved.isDemo) {
					delete unsaved.isDemo;
					delete saved.isDemo;
				}
				unsaved.feeds = args.allFeeds;
				saved.feeds = clone(unsaved.feeds);
				feeds = unsaved.feeds;
				order = unsaved.order = args.allOrder;
				// No need to save - settings panel takes care of that
				restartDelayer.activate();
			}

			if (args.feedRemove) {
				var id = args.feedRemove,
					i = get_index_by_id(id, feeds);
				if (i != -1)
					feeds.splice(i, 1);
				// i = $.inArray(id, unsaved.order);
				// if (i != -1)
					// unsaved.order.splice(i, 1);

				if (!dontSave)
					saveHandler.activate("feed_" + id, { _remove: 1 }, function() {
						// Remove from saved: Do it manually, instead of saveHandler
						var index = get_index_by_id(id, saved.feeds);
						if (index >= 0)
							saved.feeds.splice(index, 1);
					});

				restartDelayer.activate();

				if (!args.order)
					console.error("No order attached");
			}

			if (args.order) {
				order = unsaved.order = args.order;
				if (!dontSave)
					saveHandler.activate("order", order, saved, "order");
				restartDelayer.activate();
			}

			if (args.RSS) {
				if (unsaved.isDemo) {
					delete unsaved.isDemo;
					delete saved.isDemo;
					unsaved.feeds = [];
					feeds = unsaved.feeds;
					saved.feeds = [];
				}
				RSSfeeds = args.RSS;
				unsaved.RSS = {
					source: "RSS",
					RSSurl: args.RSSurl,
					env: args.RSSenv
				};
				isRSS = "RSS";
				restartDelayer.activate();
			}

			if (args.source !== undefined) {
				isRSS = args.source;
				if (isRSS && unsaved.RSS.RSSurl && (!RSSfeeds || !RSSfeeds.length)) {
					restartDelayer.stop();
					refreshRSSDelayer.activate();
				} else
					restartDelayer.activate();
			}

			if (args.settings) {
				settings = unsaved.settings = args.settings;
				saveHandler.activate("settings", settings, saved, "settings");
				restartDelayer.activate();
			}

			if (args.design) {
				if (is_any_changed(unsaved.design, args.design, ["storySpacing", "bgPadding"])) {
					stop_animation();
					restartDelayer.activate();
				}
				unsaved.design = args.design;

				set_shrt_style(shrtStyle, styleParams, unsaved.design);

				saveHandler.activate("design", unsaved.design, saved, "design");
				// set_shrt_style(shrtStyle, {colors:{}} /*styleParams*/, unsaved.design);

				// redraw(true);
				// $prods.find(".prod_box_image_div img").each(function() {
					// reload_image($(this));
				// });

				// if (!args.nosave)
					// saveHandler.activate("design", unsaved.design, saved, "design");
			}

			if (args.animation) {
				if (is_any_changed(animation, args.animation,
					["disableAnimation", "bannerAnimation", "boxAnimation", "briefsAnimation", "briefsFullAnimation"])) {
						stop_animation();
						restartDelayer.activate();
				}
				unsaved.animation = args.animation;
				animation = unsaved.animation;

				saveHandler.activate("animation", unsaved.animation, saved, "animation");
			}

			if (args.briefs_full) {
				if (args.briefs_full == "open") {
					// console.log($frameContent.find(".session:eq(0) .item:eq(0) .title"));
					if (isRSS ? RSSfeeds.length : order.length)
						enter_briefs_full(isRSS ? 0 : order[0]);
					// $frameContent.find(".session:eq(0) .item:eq(0) .title").click();
				} else {
					back_from_briefs_full();
					// var $back = $briefsFull.find(".nav_back .nav_icon");
					// if ($back.is(":visible"))
						// $back.click();
				}
			}
		}
	});

	on_style_params_change(saveURL, "styleParams", function(data) {
		if (isDiff(data.fonts, styleParams.fonts)) {
			stop_animation();
			restartDelayer.activate();
		}
		styleParams = data;
	});

	function apply_design(design, override) {
		set_shrt_style(shrtStyle, styleParams, design, override);
		// requestAnimationFrame(function() {
			// design.nameFontHeight = $fonts.filter("#name_font").height();
			// design.priceFontHeight = $fonts.filter("#price_font").height();
			// design.buttonFontHeight = $fonts.filter("#button_font").height();
			// set_shrt_style(shrtStyle, styleParams, design, override);
		// });
	}

	function is_any_changed(obj1, obj2, params) {
		for (var i = 0; i < params.length; i++)
			if (obj1[params[i]] !== obj2[params[i]])
				return true;
		return false;
	}

	function refresh_RSS() {
		do_save(saveURL, "refresh_RSS", {}, function(data) {
			RSSfeeds = data;
			restart_all();
		}, function(error) {
			console.error(error);
		});
	}


/* if (0) {
	if (animation == "v") {
		for (var i = 0; i < feeds.length; i++) {
			if (feeds[i].s)
				$("<div>").addClass("vfeed").append(
					i ? $("<div>").addClass("separator") : $(),
					$("<div>").addClass("title").text(feeds[i].t),
					$("<div>").addClass("content").text(feeds[i].s)
				).appendTo($frameContent);
		}

		// requestAnimationFrame(v_loop);

	} else if ((animation == "h") || (animation == "diagonal")) {
		for (var i = 0; i < feeds.length; i++) {
			if (feeds[i].s)
				$("<div>").addClass("hfeed").append(
					((animation == "h") && i) ? add_SVG2("heart_icon") : $(),
					$("<div>").addClass("title").text(feeds[i].t),
					$("<div>").addClass("content").text(feeds[i].s)
				).appendTo($frameContent);
		}

		speed = 100;
		space = 40;
		bigSpace = 120;

		function h_loop(x) {
			// skip = (skip ? skip - 1 : 2);
			if (!lastTime) {
				// First call
				var w = maxW;
				$frameContent.children().each(function(i) {
					var $this = $(this);
					$this.css("left", w).data("left", w);
					w += $this.outerWidth() + space;
				});
			} else if (!skip && !pause) {
				var diff = (x - lastTime) * speed / 1000,
					lastBottom = false;
				$frameContent.children().each(function() {
					var $this = $(this),
						newLeft = $this.data("left") - diff,
						w = $this.outerWidth();
					if ((newLeft + w < 0) && (lastBottom !== false))
						newLeft = lastBottom + space;

					lastBottom = newLeft + w;
					$this.css("left", Math.floor(newLeft)).data("left", newLeft);
				});

				var $first = $frameContent.children(":eq(0)"),
					w = $first.outerWidth();
				if ($first.data("left") + w < 0) {
					newLeft = Math.max(lastBottom + bigSpace, maxW + space);
					$first.css("left", Math.floor(newLeft)).data("left", newLeft);
				}
			}
			lastTime = x;
			requestAnimationFrame(h_loop);
		}

		requestAnimationFrame(h_loop);
	} else if (animation == "hand") {
		function outline_animation() {
			$("#frame_wrapper").css("border", 0).find("#frame_top,#frame_bottom").hide();
			$("#svg_anim").empty().html("<svg width='700' height='100'>"
				+ "<text x='220' y='45' fill='none' stroke='#447d7f' stroke-width='1' font-size='50'>"
				+ "We are back!"
				+ "</text>"
				+ "</svg>");
		}

		function crazy_hand() {
			$("#svg_anim").empty();
			var $canvas = $("canvas").show(),
				ctx = $canvas[0].getContext("2d"),
				dashLen = 80,
				dashOffset = dashLen,
				speed = 5,
				txt = "Check out our new collection!", //feeds[0].s,
				x = 30,
				i = 0;

			ctx.font = "35px Comic Sans MS, cursive, TSCu_Comic, sans-serif"; 
			ctx.lineWidth = 5;
			ctx.lineJoin = "round";
			ctx.globalAlpha = 2/3;
			ctx.strokeStyle = "#447d7f";
			ctx.fillStyle = "#67bcbf";
			ctx.clearRect(0, 0, 700, 700);

			function hand_loop(ts) {
				ctx.clearRect(x, 0, 60, 710);
				ctx.setLineDash([dashLen - dashOffset, dashOffset - speed]); // create a long dash mask
				dashOffset -= speed;                                         // reduce dash length
				if (txt[i] == " ")
					dashOffset = 0;
				ctx.strokeText(txt[i], x, 40);                               // stroke letter

				if (dashOffset > 0)
					requestAnimationFrame(hand_loop);             // animate
				else {
					ctx.fillText(txt[i], x, 40);                               // fill final letter
					dashOffset = dashLen;                                      // prep next char
					x += ctx.measureText(txt[i++]).width + ctx.lineWidth; // * Math.random();
					ctx.setTransform(1, 0, 0, 1, 0, 3 * Math.random());        // random y-delta
					ctx.rotate(Math.random() * 0.005);                         // random rotation
					if (i < txt.length)
						requestAnimationFrame(hand_loop);
					else
						setTimeout(flash_loop, 1500);
				}
			};
			requestAnimationFrame(hand_loop);
		};

		function flash_loop() {
			var times = 5,
				timeout = setInterval(function() {
					$("canvas").toggle();
					if (--times == 0) {
						clearInterval(timeout);
						big_loop();
					}
				}, 500);
		}

		function big_loop() {
			outline_animation();
			setTimeout(crazy_hand, 4000);
		}
		big_loop();
	}

	$frameContent.mouseover(function() {
		pause = true;
	}).mouseleave(function() {
		pause = false;
	});

	Wix.addEventListener(Wix.Events.STYLE_PARAMS_CHANGE, function(data) {
		console.log(data);
	});

} */

	$(document.body).on("dragstart", "img", false);

	//
	// Enable dragging box/briefs up/down 
	//

	$.fn.reverse = [].reverse;

	$frameContent.on(isTouch ? "touchstart" : "mousedown", function(e) {
		// Only left-click
		if (e.which && (e.which > 1))
			return;

		if (isAnimating)
			return;

		if ((isTouch && settings.disableDraggingMobile) || (!isTouch && settings.disableDragging))
			return;

		if (isDraggedTimer)
			clearTimeout(isDraggedTimer);
		isDraggedTimer = 0;

		dragQuantize = false;
		if (layout.type == "box") {
			if (animation.boxAnimation != "ver") {
				dragMode = dragHorizontal;

				var $item = sessionsArr[0].find(".item:eq(0)");
				dragQuantize = $item.outerWidth() + $item.next().outerWidth();
			} else
				dragMode = dragVertical;
		} else if (layout.type == "banner") {
			if (animation.bannerAnimation != "hor") {
				dragMode = dragVertical;

				var $item = sessionsArr[0].find(".item:eq(0)");
				dragQuantize = $item.outerHeight() + $item.next().outerHeight();
			} else
				dragMode = settings.RTL ? dragHorizontalRight : dragHorizontal;
		} else {
			// briefs
			if (animation.briefsAnimation != "ver")
				return;
			dragMode = dragVertical;
		}

		isDragged = true;
		maxDimension = $frameContent[dragMode.oDim]();

		dragFirstOffset = dragLastOffset = isTouch ?
			e.originalEvent.touches[0][dragMode.coor] : e[dragMode.coor];
		if (dragMode.inv) {
			dragLastOffset = -dragLastOffset;
			dragFirstOffset = -dragFirstOffset;
		}

		sessionsOffsets = $frameContent.children().map(function() {
			return $(this).data(dragMode.posFrom) - dragLastOffset;
		}).get();

		dragAndNotClick = false;
		e.stopPropagation();
	})
	.on(isTouch ? "touchmove" : "mousemove", function(e) {
		if (isDragged) {
			var coorPos = isTouch ? e.originalEvent.touches[0][dragMode.coor] : e[dragMode.coor];
			if (dragMode.inv)
				coorPos = -coorPos;

			if (coorPos > dragLastOffset) {
				// Mouse dragged down (right)
				move_down_or_right(coorPos);
			} else {
				// Mouse dragged up (left)
				move_up_or_left(coorPos);
			}
			dragLastOffset = coorPos;

			dragAndNotClick = true;
			if (e.preventDefault)
				e.preventDefault();
		}
	})
	.on(isTouch ? "touchend" : "mouseup mouseleave", function(e) {
		if (isDragged) {
			if (dragQuantize) {
				var moveTo = dragFirstOffset;
				if (dragLastOffset - dragFirstOffset > dragQuantize / 2) {
					// Moved more than half way right
					moveTo = dragFirstOffset + dragQuantize;
					if (--animationStatus.part < 0) {
						animationStatus.part += animationStatus.numParts;
						if (--animationStatus.session < 0)
							animationStatus.session += animationStatus.numSessions;
					}
				} else if (dragFirstOffset - dragLastOffset > dragQuantize / 2) {
					// Moved move than half way left
					moveTo = dragFirstOffset - dragQuantize;
					if (++animationStatus.part >= animationStatus.numParts) {
						animationStatus.part -= animationStatus.numParts;
						if (++animationStatus.session >= animationStatus.numSessions)
							animationStatus.session -= animationStatus.numSessions;
					}
				}

				var $nextItem = sessionsArr[animationStatus.session].find(".item:eq("
					+ (animationStatus.part % animationStatus.numParts) + ")");
				curItemId = $nextItem.data("id");

				activate_tab_areas(["nav",
					"i_" + animationStatus.session + "_" + curItemId + "_" + $nextItem.data("part")]);
				select_circle();

				if (moveTo > dragLastOffset)
					move_down_or_right(moveTo);
				else
					move_up_or_left(moveTo);
			}

			isDragged = false;
			isDraggedTimer = setTimeout(function() {
				isDraggedTimer = 0;
			}, 2000);
		}
	});
	// .on('selectstart', function() { return false; })

	function move_up_or_left(coorPos) {
		var $sessions = $frameContent.children(),
			lastIndex = $sessions.length - 1,
			lastTopBottom = false;

		$sessions.each(function(i) {
			var $this = $(this),
				newTop = sessionsOffsets[i] + coorPos,
				h = $this[dragMode.oDim]();
			if ((newTop + h < 0) && (lastTopBottom !== false)) {
				sessionsOffsets[i] += lastTopBottom + (dragQuantize ? 0 : space) - newTop;
				newTop = lastTopBottom + (dragQuantize ? 0 : space);
			}

			lastTopBottom = newTop + h;
			$this.css(dragMode.posFrom, Math.floor(newTop)).data(dragMode.posFrom, newTop);
		});
		var $first = $sessions.eq(0),
			h = $first[dragMode.oDim]();
		if ($first.data(dragMode.posFrom) + h < 0) {
			var newTop = sessionsOffsets[0] + coorPos;
			sessionsOffsets[0] += lastTopBottom + (dragQuantize ? 0 : bigSpace) - newTop;
			newTop = lastTopBottom + (dragQuantize ? 0 : bigSpace);
			$first.css(dragMode.posFrom, Math.floor(newTop)).data(dragMode.posFrom, newTop);
		}
	} // move_up_or_left()

	function move_down_or_right(coorPos) {
		var $sessions = $frameContent.children(),
			lastIndex = $sessions.length - 1,
			lastTopBottom = false;

		$sessions.reverse().each(function(j) {
			var i = lastIndex - j,
				$this = $(this),
				newTop = sessionsOffsets[i] + coorPos,
				h = $this[dragMode.oDim]();

			if ((newTop > maxDimension) && (lastTopBottom !== false)) {
				sessionsOffsets[i] += lastTopBottom - (dragQuantize ? 0 : space) - h - newTop;
				newTop = lastTopBottom - (dragQuantize ? 0 : space) - h;
			}
			lastTopBottom = newTop;

			$this.css(dragMode.posFrom, Math.floor(newTop)).data(dragMode.posFrom, newTop);
		});

		var $last = $sessions.eq(0),
			h = $last[dragMode.oDim]();
		if ($last.data(dragMode.posFrom) > maxDimension) {
			var newTop = sessionsOffsets[lastIndex] + coorPos;
			sessionsOffsets[lastIndex] += lastTopBottom - (dragQuantize ? 0 : bigSpace) - h - newTop;
			newTop = lastTopBottom - (dragQuantize ? 0 : bigSpace) - h;
			$last.css(dragMode.posFrom, Math.floor(newTop)).data(dragMode.posFrom, newTop);
		}
	} // move_down_or_right()

	//
	// Enable dragging briefs-full up/down 
	//

	$briefsFull.on(isTouch ? "touchstart" : "mousedown", function(e) {
		// Only left-click
		if (e.which && e.which > 1)
			return;

		if ((isTouch && settings.disableDraggingMobile) || (!isTouch && settings.disableDragging))
			return;

		if (animation.briefsFullAnimation != "ver")
			return;

		var ypos = isTouch ? e.originalEvent.touches[0].clientY : e.clientY;

		isDragged = true;
		briefsFullOffsetY = ypos + $briefsFull.data("top");
		dragAndNotClick = false;
		e.stopPropagation();
	})
	.on(isTouch ? "touchmove" : "mousemove", function(e) {
		if (isDragged) {
			var ypos = isTouch ? e.originalEvent.touches[0].clientY : e.clientY,
				newTop = Math.max(briefsFullOffsetY - ypos, 0);
			$briefsFull.scrollTop(Math.floor(newTop)).data("top", newTop);
			dragAndNotClick = true;
			if (e.preventDefault)
				e.preventDefault();
		}
	})
	.on(isTouch ? "touchend" : "mouseup mouseleave", function(e) {
		isDragged = false;
	});
	// .on('selectstart', function() { return false; });

	$attribution.click(function() {
		$attribution.hide();
	});

	Wix.addEventListener(Wix.Events.SITE_PUBLISHED, function() {
		publishAfterSaved = true;
		saveHandler.save_now();
	});

	Wix.addEventListener(Wix.Events.PAGE_NAVIGATION_IN, function() {
		console.log("detected navigation")
		restartDelayer.activate();
	})

	function safe_html_with_newlines(s) {
		return html2txt(strip_src_protocol(s)).replace(/\n/g, "<br>");
	}

	function strip_protocol(str) {
		return str.replace(/^https?:/, "");
	}
	function strip_src_protocol(str) {
		// Run before using html2txt() to prevent outputing protocol-related warnings
		return str.replace(/(src=\")?https?:/g, "$1");
	}

	// $(document.body).on("focus", "div", function() {
		// console.log($(this), this.id);
		// return false;
	// })
});

function add_SVG2(id, classes, viewBox) {
	return $("<div>").addClass(id + " SVG_wrapper" + (classes ? " " + classes : "")).append(
		$("<svg" + 
			((viewBox == "auto") ? "" : (" viewBox=\"" + (viewBox ? viewBox : "0 0 100 100") + "\""))
			+ "><use xlink:href=\"#" + id + "\">")
	);
}

